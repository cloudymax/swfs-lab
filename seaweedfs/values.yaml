global:
  createClusterRole: true
  imageName: chrislusf/seaweedfs
  imagePullPolicy: IfNotPresent
  loggingLevel: 1
  enableSecurity: false
  securityConfig:
    jwtSigning:
      volumeWrite: true
      volumeRead: false
      filerWrite: false
      filerRead: false
  serviceAccountName: "seaweedfs-sa"
  certificates:
    alphacrds: false
  monitoring:
    enabled: true
    gatewayHost: null
    gatewayPort: null
  enableReplication: false
  replicationPlacment: "001"
  extraEnvironmentVars:
    WEED_CLUSTER_DEFAULT: "sw"
    WEED_CLUSTER_SW_MASTER: "seaweedfs-master.seaweedfs:9333"
    WEED_CLUSTER_SW_FILER: "seaweedfs-filer-client.seaweedfs:8888"
    GOMEMLIMIT: "1GiB"

image:
  registry: ""
  repository: ""

master:
  enabled: true
  replicas: 1
  port: 9333
  grpcPort: 19333
  metricsPort: 9327
  ipBind: "0.0.0.0"
  volumePreallocate: false
  volumeSizeLimitMB: 1000
  loggingOverrideLevel: null
  pulseSeconds: null
  garbageThreshold: null
  metricsIntervalSec: 15
  defaultReplication: "000"
  disableHttp: false
  config: |-
    # Enter any extra configuration for master.toml here.
    # It may be be a multi-line string.
  data:
    type: "existingClaim"
    claimName: "swfs-master-data"
  logs:
    type: "hostPath"
    size: ""
    storageClass: ""
    hostPathPrefix: /storage
  livenessProbe:
    enabled: true
    httpGet:
      path: /cluster/status
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 2
    successThreshold: 1
    failureThreshold: 100
    timeoutSeconds: 10
  readinessProbe:
    enabled: true
    httpGet:
      path: /cluster/status
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 2
    successThreshold: 2
    failureThreshold: 100
    timeoutSeconds: 10
  podSecurityContext: {}
  containerSecurityContext: {}
  extraVolumes: ""
  extraVolumeMounts: ""
  ingress:
    enabled: true
    className: "nginx"
    # host: false for "*" hostname
    host: "s3.buildstars.online"
    annotations:
      nginx.ingress.kubernetes.io/auth-type: "basic"
      nginx.ingress.kubernetes.io/auth-secret: "default/ingress-basic-auth-secret"
      nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - SW-Master'
      nginx.ingress.kubernetes.io/service-upstream: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/enable-rewrite-log: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      nginx.ingress.kubernetes.io/configuration-snippet: |
        sub_filter '<head>' '<head> <base href="/sw-master/">'; #add base url
        sub_filter '="/' '="./';                                #make absolute paths to relative
        sub_filter '=/' '=./';
        sub_filter '/seaweedfsstatic' './seaweedfsstatic';
        sub_filter_once off;
    tls: []

  extraEnvironmentVars:
    WEED_MASTER_VOLUME_GROWTH_COPY_1: '7'
    WEED_MASTER_VOLUME_GROWTH_COPY_2: '6'
    WEED_MASTER_VOLUME_GROWTH_COPY_3: '3'
    WEED_MASTER_VOLUME_GROWTH_COPY_OTHER: '1'

volume:
  enabled: true
  port: 8080
  grpcPort: 18080
  metricsPort: 9327
  ipBind: "0.0.0.0"
  index: leveldb
  replicas: 1
  loggingOverrideLevel: null
  fileSizeLimitMB: null
  minFreeSpacePercent: 7
  compactionMBps: "250"
  readMode: proxy
  whiteList: null
  dataDirs:
    - name: data
      type: "existingClaim"
      claimName: "swfs-volume-data"
      maxVolumes: 0
  idx: {}
  livenessProbe:
    enabled: true
    httpGet:
      path: /status
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 2
    successThreshold: 1
    failureThreshold: 100
    timeoutSeconds: 10
  readinessProbe:
    enabled: true
    httpGet:
      path: /status
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 2
    successThreshold: 2
    failureThreshold: 100
    timeoutSeconds: 10
  podSecurityContext: {}
  containerSecurityContext: {}
  extraVolumes: ""
  resizeHook:
    enabled: true
    image: bitnami/kubectl
  extraVolumeMounts: ""

filer:
  enabled: true
  replicas: 1
  port: 8888
  grpcPort: 18888
  metricsPort: 9327
  encryptVolumeData: true
  enablePVC: true
  storage: 10Gi
  dirListLimit: 100000
  defaultReplicaPlacement: "000"
  data:
    type: "existingClaim"
    claimName: "swfs-filer-data"
  logs:
    type: "hostPath"
    size: ""
    storageClass: ""
    hostPathPrefix: /storage
  s3:
    enabled: true
    port: 8333
    httpsPort: 0
    allowEmptyFolder: false
    domainName: s3.buildstars.online
    enableAuth: true
    existingConfigSecret: seaweedfs-s3-secret
    createBuckets:
      - name: data
        anonymousRead: false
  ingress:
    enabled: true
    className: "nginx"
    # host: false for "*" hostname
    host: "s3.buildstars.online"
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 1024m
      nginx.ingress.kubernetes.io/auth-type: "basic"
      nginx.ingress.kubernetes.io/auth-secret: "default/ingress-basic-auth-secret"
      nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - SW-Filer'
      nginx.ingress.kubernetes.io/service-upstream: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/enable-rewrite-log: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      nginx.ingress.kubernetes.io/configuration-snippet: |
        sub_filter '<head>' '<head> <base href="/sw-filer/">'; #add base url
        sub_filter '="/' '="./';                               #make absolute paths to relative
        sub_filter '=/' '=./';
        sub_filter '/seaweedfsstatic' './seaweedfsstatic';
        sub_filter_once off;
  extraEnvironmentVars:
    WEED_MYSQL_ENABLED: "false"
    WEED_LEVELDB2_ENABLED: "true"
   # WEED_REDIS_CLUSTER2_ENABLED: "true"
   # WEED_REDIS_CLUSTER2_ADDRESSES: "redis-redis-cluster.juicefs.svc.cluster.local:6379"
   # WEED_REDIS_CLUSTER2_PASSWORD: "ChangeMe!"
   # WEED_FILER_OPTIONS_RECURSIVE_DELETE: "true"
   # WEED_FILER_BUCKETS_FOLDER: "/buckets"
  secretExtraEnvironmentVars: {}
  extraVolumes: ""
  extraVolumeMounts: ""
  podSecurityContext: {}
  containerSecurityContext: {}

  livenessProbe:
    enabled: true
    httpGet:
      path: /
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 2
    successThreshold: 1
    failureThreshold: 100
    timeoutSeconds: 10
  readinessProbe:
    enabled: true
    httpGet:
      path: /
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 2
    successThreshold: 2
    failureThreshold: 100
    timeoutSeconds: 10

s3:
  enabled: false
  ingress:
    enabled: false
    className: "nginx"
    # host: false for "*" hostname
    host: ""
    # additional ingress annotations for the s3 endpoint
    annotations:
      cert-manager.io/cluster-issuer: ""
      nginx.ingress.kubernetes.io/proxy-body-size: "64m"
    tls:
      - secretName: zitadel-seaweedfs-tls
        hosts:
          - ""

cosi:
  enabled: false
